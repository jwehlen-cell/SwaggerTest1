openapi: 3.0.0
info:
  title: Pet Store API
  description: A sample Pet Store API to demonstrate OpenAPI specification
  version: 1.0.0
  contact:
    name: API Support
    email: support@petstore.example.com

servers:
  - url: https://api.petstore.example.com/v1
    description: Production server
  - url: https://staging-api.petstore.example.com/v1
    description: Staging server

tags:
  - name: pets
    description: Everything about your Pets
  - name: store
    description: Access to Petstore orders

paths:
  /pets:
    get:
      tags:
        - pets
      summary: List all pets
      description: Returns a list of all pets in the store
      operationId: listPets
      parameters:
        - name: limit
          in: query
          description: How many items to return at one time (max 100)
          required: false
          schema:
            type: integer
            format: int32
            maximum: 100
      responses:
        '200':
          description: A paged array of pets
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - pets
      summary: Create a pet
      description: Creates a new pet in the store
      operationId: createPet
      requestBody:
        description: Pet object that needs to be added to the store
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewPet'
      responses:
        '201':
          description: Pet created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /pets/{petId}:
    get:
      tags:
        - pets
      summary: Get a pet by ID
      description: Returns a single pet
      operationId: getPetById
      parameters:
        - name: petId
          in: path
          description: ID of pet to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        '404':
          description: Pet not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - pets
      summary: Update a pet
      description: Updates an existing pet
      operationId: updatePet
      parameters:
        - name: petId
          in: path
          description: ID of pet to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Pet object that needs to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewPet'
      responses:
        '200':
          description: Pet updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        '404':
          description: Pet not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - pets
      summary: Delete a pet
      description: Deletes a pet from the store
      operationId: deletePet
      parameters:
        - name: petId
          in: path
          description: ID of pet to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Pet deleted successfully
        '404':
          description: Pet not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    Pet:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Fluffy
        tag:
          type: string
          example: cat
        status:
          type: string
          description: Pet status in the store
          enum:
            - available
            - pending
            - sold
          example: available

    NewPet:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: Fluffy
        tag:
          type: string
          example: cat
        status:
          type: string
          description: Pet status in the store
          enum:
            - available
            - pending
            - sold
          example: available

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
          example: 400
        message:
          type: string
          example: Invalid request
